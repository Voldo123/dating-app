<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\Hash;
use App\Models\User;
use App\Models\Tag;
use Illuminate\Support\Facades\DB;

class UsersTableSeeder extends Seeder
{
    public function run(): void
    {
        // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        DB::beginTransaction();

        try {
            // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏
            $tags = [
                '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
                '–ö–∏–Ω–æ', 
                '–ú—É–∑—ã–∫–∞',
                '–°–ø–æ—Ä—Ç',
                '–ò–¢',
                '–ò—Å–∫—É—Å—Å—Ç–≤–æ',
                '–ö—É–ª–∏–Ω–∞—Ä–∏—è', 
                '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è',
                '–ö–Ω–∏–≥–∏',
                '–ü—Ä–∏—Ä–æ–¥–∞'
            ];

            $tagModels = [];
            foreach ($tags as $tagName) {
                $tag = Tag::firstOrCreate(['name' => $tagName]);
                $tagModels[] = $tag;
            }

            $this->command->info('‚úÖ –°–æ–∑–¥–∞–Ω–æ/–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ 10 —Ç–µ–≥–æ–≤');

            // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
            $admin = User::firstOrCreate(
                ['email' => 'admin@vstrechka.ru'],
                [
                    'name' => '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                    'password' => Hash::make('admin123'),
                    'age' => 30,
                    'gender' => '–ú—É–∂—á–∏–Ω–∞',
                    'city' => '–ú–æ—Å–∫–≤–∞',
                    'about' => '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∞–π—Ç–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤ Vstrechka',
                    'telegram' => 'admin_vstrechka',
                    'role' => 'admin',
                ]
            );

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –∞–¥–º–∏–Ω—É (3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ–≥–∞)
            $adminTags = collect($tagModels)->random(3)->pluck('id')->toArray();
            $admin->tags()->sync($adminTags);

            $this->command->info('‚úÖ –°–æ–∑–¥–∞–Ω/–ø—Ä–æ–≤–µ—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–µ–≥–∞–º–∏');

            // –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            $maleNames = ['–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–î–º–∏—Ç—Ä–∏–π', '–ú–∞–∫—Å–∏–º', '–°–µ—Ä–≥–µ–π', '–ê–Ω–¥—Ä–µ–π', '–ê–ª–µ–∫—Å–µ–π'];
            $femaleNames = ['–ê–Ω–Ω–∞', '–ú–∞—Ä–∏—è', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–û–ª—å–≥–∞', '–ù–∞—Ç–∞–ª—å—è', '–ò—Ä–∏–Ω–∞'];
            $cities = ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥'];
            $aboutTexts = [
                '–õ—é–±–ª—é –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. –ò—â—É —Å–µ—Ä—å–µ–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.',
                '–†–∞–±–æ—Ç–∞—é –≤ IT, —É–≤–ª–µ–∫–∞—é—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π. –•–æ—á—É –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.',
                '–õ—é–±–ª—é –∫–∏–Ω–æ, –º—É–∑—ã–∫—É –∏ –≤–∫—É—Å–Ω—É—é –µ–¥—É. –ò—â—É —Ç–æ–≥–æ, —Å –∫–µ–º –º–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —É–≤–ª–µ—á–µ–Ω–∏—è.',
                '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π, —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π. –ò—â—É –¥–µ–≤—É—à–∫—É –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.',
                '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å, –∑–∞–Ω–∏–º–∞—é—Å—å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º. –ò—â—É –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –≤ –ª—é–¥—è—Ö.',
                '–õ—é–±–ª—é –ø—Ä–∏—Ä–æ–¥—É –∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö. –ò—â—É –¥–æ–±—Ä–æ–≥–æ –∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.',
            ];

            // –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã —Ç–µ–≥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            $tagCombinations = [
                [0, 1, 2],   // –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –ö–∏–Ω–æ, –ú—É–∑—ã–∫–∞
                [3, 4, 5],   // –°–ø–æ—Ä—Ç, –ò–¢, –ò—Å–∫—É—Å—Å—Ç–≤–æ  
                [6, 7, 8],   // –ö—É–ª–∏–Ω–∞—Ä–∏—è, –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –ö–Ω–∏–≥–∏
                [0, 3, 9],   // –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –°–ø–æ—Ä—Ç, –ü—Ä–∏—Ä–æ–¥–∞
                [1, 4, 7],   // –ö–∏–Ω–æ, –ò–¢, –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
                [2, 5, 8],   // –ú—É–∑—ã–∫–∞, –ò—Å–∫—É—Å—Å—Ç–≤–æ, –ö–Ω–∏–≥–∏
                [0, 6, 9],   // –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –ö—É–ª–∏–Ω–∞—Ä–∏—è, –ü—Ä–∏—Ä–æ–¥–∞
                [3, 7, 8],   // –°–ø–æ—Ä—Ç, –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –ö–Ω–∏–≥–∏
            ];

            // –°–æ–∑–¥–∞–µ–º 3 –º—É–∂—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª—è
            for ($i = 0; $i < 3; $i++) {
                $user = User::firstOrCreate(
                    ['email' => 'user' . ($i + 1) . '@vstrechka.ru'],
                    [
                        'name' => $maleNames[$i],
                        'password' => Hash::make('password123'),
                        'age' => rand(22, 35),
                        'gender' => '–ú—É–∂—á–∏–Ω–∞',
                        'city' => $cities[array_rand($cities)],
                        'about' => $aboutTexts[$i],
                        'telegram' => 'user' . ($i + 1),
                        'role' => 'user',
                    ]
                );

                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ–≥–∞)
                $userTags = $tagCombinations[$i % count($tagCombinations)];
                $tagIds = collect($tagModels)->filter(function($tag, $index) use ($userTags) {
                    return in_array($index, $userTags);
                })->pluck('id')->toArray();
                
                $user->tags()->sync($tagIds);
            }

            // –°–æ–∑–¥–∞–µ–º 3 –∂–µ–Ω—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª—è
            for ($i = 0; $i < 3; $i++) {
                $user = User::firstOrCreate(
                    ['email' => 'user' . ($i + 4) . '@vstrechka.ru'],
                    [
                        'name' => $femaleNames[$i],
                        'password' => Hash::make('password123'),
                        'age' => rand(20, 32),
                        'gender' => '–ñ–µ–Ω—â–∏–Ω–∞',
                        'city' => $cities[array_rand($cities)],
                        'about' => $aboutTexts[$i + 3],
                        'telegram' => 'user' . ($i + 4),
                        'role' => 'user',
                    ]
                );

                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ–≥–∞)
                $userTags = $tagCombinations[($i + 3) % count($tagCombinations)];
                $tagIds = collect($tagModels)->filter(function($tag, $index) use ($userTags) {
                    return in_array($index, $userTags);
                })->pluck('id')->toArray();
                
                $user->tags()->sync($tagIds);
            }

            DB::commit();
            
            $this->command->info('‚úÖ –°–æ–∑–¥–∞–Ω–æ 6 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–≥–∞–º–∏: user1@vstrechka.ru - user6@vstrechka.ru / password123');
            $this->command->info('üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');

        } catch (\Exception $e) {
            DB::rollback();
            $this->command->error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ' . $e->getMessage());
            throw $e;
        }
    }
}